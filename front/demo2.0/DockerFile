# Usa la imagen oficial de Node con una versión específica
# FROM node:10.2.3

# # Establece el directorio de trabajo en /app
# WORKDIR /app

# # Copia el archivo package.json e instala las dependencias
# COPY package.json .

# # Instala las dependencias
# RUN npm install

# # Copia todos los archivos de la aplicación al contenedor
# COPY . .

# # Construye la aplicación
# RUN npm run build

# # Expone el puerto 80 del contenedor
# EXPOSE 80

# # Comando para ejecutar la aplicación
# CMD ["npm", "start"]
# Usa una imagen base con Node.js y npm instalados
# FROM node:16 AS builder

# # Establece el directorio de trabajo en /app
# WORKDIR /app

# # Copia el archivo package.json y package-lock.json para instalar dependencias
# COPY package*.json ./

# # Instala las dependencias
# RUN npm install

# # Copia el resto de la aplicación al contenedor
# COPY . .

# # Construye la aplicación Angular en modo producción
# RUN npm run build

# # Usa una imagen más ligera para el servidor web
# FROM nginx:latest

# # Copia los archivos de construcción de Angular al directorio de trabajo del servidor web de Nginx
# COPY --from=builder /app/dist /usr/share/nginx/html

# # Expone el puerto en el que se ejecutará el servidor web de Nginx
# EXPOSE 80

# # Comando para iniciar el servidor web de Nginx
# CMD ["nginx", "-g", "daemon off;"]

# Primera etapa de construcción: usa una imagen de Node.js 10 en Alpine como base
FROM node:19-alpine3.15 as build-step

# Crea el directorio /app en el contenedor
RUN mkdir -p /app

# Establece el directorio de trabajo en /app
WORKDIR /app

# Copia el archivo package.json y package-lock.json para instalar dependencias
COPY package*.json /app

# Instala las dependencias del proyecto
RUN npm install --force
RUN npm install ngx-toastr --save --force
# Copia todos los archivos del proyecto al directorio /app
COPY . /app/

# Ejecuta el comando 'npm run build --prod' para construir la aplicación Angular en modo producción
RUN npm run build 

# Segunda etapa: usa una imagen de Nginx como base
FROM nginx:latest

# Copia los archivos de construcción de Angular desde la primera etapa (/app/dist/demo2.0) al directorio de trabajo del servidor web Nginx
COPY --from=build-step /app/dist /usr/share/nginx/html
RUN rm /etc/nginx/conf.d/default.conf
COPY nginx.conf /etc/nginx/conf.d/default.conf
# Expone el puerto 80 para que otros contenedores puedan acceder al servidor web Nginx
# EXPOSE 80

# Comando para iniciar el servidor web de Nginx en modo daemon
CMD ["nginx", "-g", "daemon off;"]
